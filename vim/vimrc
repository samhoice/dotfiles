" conditionally install vimplug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" set nocp

" mouse all
set mouse=a

" statusline on for single window
set laststatus=2
set runtimepath^=~/.vim/bundle/ctrlp.vim

set diffopt=vertical

" swap file
:set dir=~/.vim/swap

" First shot at html/css settings
au BufNewFile,BufRead *.html,*.css,*.xml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set expandtab |
    \ set shiftwidth=2

" special for OCPT - can remove
au BufNewFile,BufRead Dockerfile_base
    \ set filetype=dockerfile

let mapleader=" "
let maplocalleader="\\"

filetype plugin indent on

" Plugins
call plug#begin('~/.vim/vplug')

" Code editing
Plug 'kien/ctrlp.vim'
" Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'pangloss/vim-javascript'
Plug 'dense-analysis/ale'
Plug 'christianrondeau/vim-base64'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'easymotion/vim-easymotion'
Plug 'raimon49/requirements.txt.vim'
Plug 'moll/vim-bbye'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'jremmen/vim-ripgrep'

" Orgmode stuff
"Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'
" Plug 'mattn/calendar-vim'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/utl.vim'

Plug 'mrk21/yaml-vim'
Plug 'leafgarland/typescript-vim'
Plug 'mileszs/ack.vim'

" For writing
" Focus mode: Goyo to turn it on or off
Plug 'junegunn/goyo.vim'
" For working with text files
Plug 'reedes/vim-pencil'
" Markdown wiki
Plug 'vimwiki/vimwiki'
 
" airline, because powerline is too hard to install
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'

" colorschemes
Plug 'vim-scripts/summerfruit256.vim'
Plug 'NLKNguyen/papercolor-theme'
" In a lot of ways, this one doesn't work. Neat, though
" Plug 'Fuzen-py/dark_mode.vim
call plug#end()

au BufRead,BufWinEnter,BufNewFile *.{md,mdx,mdown,mkd,mkdn,markdown,mdwn} setlocal syntax=markdown

set nocompatible
syntax on
"set termguicolors

"colorscheme torte
"colorscheme summerfruit256
colorscheme PaperColor
" set background=dark
set background=light

function! EMHighlight()
  hi link EasyMotionTarget SpellBad
  hi link EasyMotionTarget2First SpellRare
  hi link EasyMotionTarget2Second SpellLocal
endfunction

call EMHighlight()

" function for changing light/dark mode
function! ToggleBackground()
	if &background == 'light'
		set background=dark
	else
		set background=light
	endif

  call EMHighlight()
endfunction


" NERDTree git mappings (non-unicode)
" This might not be needed anymore since all my terminals should
" be unicode compliant?
"let g:NERDTreeGitStatusIndicatorMapCustom = {
"    \ "Modified"  : "*",
"    \ "Staged"    : "+",
"    \ "Untracked" : "u",
"    \ "Renamed"   : ">",
"    \ "Unmerged"  : "=",
"    \ "Deleted"   : "x",
"    \ "Dirty"     : "*",
"    \ "Clean"     : "c",
"    \ 'Ignored'   : 'i',
"    \ "Unknown"   : "?"
"    \ }

let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack

" ctags
set tags=tags

" custom ignores for ctrlp (node_modules and media are big ones)
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|media)|(\.(pyc|swp|ico|git|svn))$'
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

" orgmode stuff
"let g:org_agenda_files = ['~/journal/*.org']
"let g:org_indent = 1
" States before the | are 'TODO' states and after are the 'done' states
" let g:org_todo_keywords=['TODO', 'FEEDBACK', 'VERIFY', '|', 'DONE', 'DELEGATED']



" leader mappings
" vimrc updating
noremap <leader>ev :edit $MYVIMRC<cr>
noremap <leader>sv :source $MYVIMRC<cr>
noremap <leader>ed :Ex ~/.vim<cr>

" NERDTree
nnoremap <leader>ntg :NERDTreeFocus<cr>
nnoremap <leader>ntt :NERDTreeToggle<cr>
nnoremap <leader>ntf :NERDTreeFind<cr>

" line - should now be replaced with '] '
" nnoremap <leader>o o<esc>^D
" nnoremap <leader>O O<esc>^D

" Date
noremap <leader>D :execute ':normal! a'.strftime('%Y-%m-%d')<cr>

" JIRA
noremap <leader>jal :execute':normal! a'."https://cx-jira.cisco.com/browse/BDB20-"<cr>
noremap <leader>jil :execute':normal! i'."https://cx-jira.cisco.com/projects/BDB20/issues/BDB20-"<cr>
noremap <leader>gal :execute':normal! a'."https://gitlab-sjc.cisco.com/"<cr>

" Light and dark modes
noremap <leader>bsd :set background=dark<cr>
noremap <leader>bsl :set background=light<cr>
noremap <leader>bst :call ToggleBackground()<cr>

" FZF
nnoremap <leader>p :FZF<cr>
nnoremap <leader>; :Buffers<cr>

" ALE
let g:ale_hover_to_preview = 0
nnoremap <leader>at <Plug>(ale_toggle)
nnoremap <leader>ag <Plug>(ale_go_to_definition)
nnoremap <silent> <Plug>(ale_find_ref_qf) :ALEFindReferences -quickfix<Return>
nnoremap <silent> <leader>ar <Plug>(ale_find_references)
nnoremap <leader>ah <Plug>(ale_hover)
nnoremap <leader>an <Plug>(ale_next)
nnoremap <leader>ap <Plug>(ale_previous)
nnoremap <leader>ad <Plug>(ale_detail)

let g:ale_markdown_markdown_executable = 'markdownlint-cli2'

" git fugitive
nnoremap <leader>gd :Gdiffsplit<cr>
" git gutter
nnoremap <leader>gt :GitGutterToggle<cr>

" vim base64
let g:vim_base64_disable_default_key_mappings = 1
vnoremap <silent> <leader>64d :<c-u>call base64#v_atob()<cr>
vnoremap <silent> <leader>64e :<c-u>call base64#v_btoa()<cr>
" change linefeeds from yaml
noremap <leader>lf :s/\\n/\r/g<cr>

" vimwiki
let g:vimwiki_listsyms = ' .oOx' " Obsidian uses 'x', which confuses vimwiki
let g:vimwiki_global_ext = 0

" notes def
let my_notes = {}
let my_notes.name = 'My Notes'
let my_notes.path = '~/ext_notes'
let my_notes.index = 'NotesRoot'
let my_notes.diary_rel_path = ''
let my_notes.syntax = 'markdown'
let my_notes.ext = '.md'
let g:vimwiki_list = [my_notes]

nmap <localleader>- <Plug>VimwikiRemoveHeaderLevel

function! JournalPageFromTemplate()
    let fname = "" . g:cisco_notes.diary_rel_path . "/" . strftime('%Y-%m-%d').'.md'
    let dow_tpl = strftime('%A').'JournalTemplate.md'

    if isdirectory(g:cisco_notes.diary_rel_path) && !filereadable(fname)
      call system("task export next | jq -r '.[] | .description' | sed 's/^/- \[ \] /' > open_tasks.md")
      call system("sed -e '/# Tasks/r open_tasks.md' ". dow_tpl . " > " . fname)
    endif
    "call system('cp -n ' . dow_tpl . ' ' . fname)
endfunction

noremap <silent> <leader>w<leader>w :call JournalPageFromTemplate()|:VimwikiMakeDiaryNote<cr>

" to source an external file
if filereadable(expand('~/.vim/cisco.vim'))
    source ~/.vim/cisco.vim
endif
